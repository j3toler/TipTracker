# -*- coding: utf-8 -*-
"""
Created on Wed Oct 26 15:27:30 2016

@author: jayto_000
"""

import optparse

def isValidString(option):
    """
       takes as input option <string>
       
       checks option for being under 20 characters in length, and
       all characters are valid english characters or a space           
       
       returns true or false
    """
    max_len = 20
    if len(option) >= max_len or len(option) == 0:
        print "Invalid format"        #Debugging use only
        return False
    valid_chars = 'abcdefghijklmnopqrstuvwxyz '
    opt = option.lower()
    for char in opt:
        if char not in valid_chars:
            print "Invalid format"     #debugging use only
            return False
    return True

def isValidTipFactor(tip_factor):
    """
       takes as input tip_factor <int>
       
       assumes the input is already an int, 
       but checks valid range between 0 and 100       
       
       returns True or False
    """
    if tip_factor <= 0 or tip_factor >= 100:
        print "Invalid Range"        #Debugging use only
        return False
    return True

def isValidYN(answer):
    """
       MISSING DESCRIPTION
    """
    if answer.lower() == 'true':
        return True
    if answer.lower() == 'false':
        return False
    if len(answer) != 1 or type(answer) != str:
        print "Invalid Format"           #Debugging use only
        return None
    ans = answer.lower()
    if ans == 'y':
        return True
    if ans == 'n':
        return False

def isValidHours(hours):
    """
       Takes as input hours <float>
       
       checks if hours provided are between 0 and 24
       
       returns True or False
    """
    if hours <= 0.0 or hours >= 24.0:
        return False
    return True

def isValidSales(number, max_limit=5000):
    """
       MISSING DESCRIPTION
    """
    number = str(number)
    if len(number) > 7 or len(number) == 0:
        print 'Invalid Format'
        return False
    if '.' in number:
        dollar, cents = number.split('.')
    if int(dollar) > max_limit or int(dollar) < 0:
        print 'Invalid Format'
        return False
    if int(cents) > 99 or int(cents) < 0:
        print 'Invalid Format'
        return False
    return True

def getTipInfo():
    """
       MISSING DESCRIPTION
    """
    tip_out = {}
    while True:

        ## Below validates who is being tipped out ##

#        tip_person = raw_input("Who do you have to tip out: ")
        tip_person = "Busser"
        if not isValidString(tip_person):
            tip_person = raw_input("Enter a Valid Name: ")
            if not isValidString(tip_person):
                exit(0)
                
        ## Below checks if there is a minimum that you must tip ##
        ########## NOT FINISHED ##########
        def assignYN(option):
            """
               MISSING DESCRIPTION
            """
            if str(option).lower() == 'true' or option.lower() == 'y':
                return True
            print 'Here:', str(option).lower()
            if str(option).lower() == 'false' or option.lower() == 'n':
                print 'ENTER'
                return False
            
        minimum_exists = raw_input("Is there a minimum you have to tip them out: ")
        if isValidYN(minimum_exists) == None:
            minimum_exists = raw_input("Enter \'y\' or \'n\': ")
        if isValidYN(minimum_exists) == None:
            exit(0)
        if isValidYN(minimum_exists):
            minimum_exists = assignYN(minimum_exists)
        
        print 'test value:', minimum_exists
        exit(0)
        ########## NOT FINISHED ##########
        ## Below validates what part of the total sales the person gets tipped out on        

        def isValidOption(option):
            """
               takes as input option <string>
               
               assumes option is already lowercase, checks if the option
               is in the list of valid options
               
               return True or False
            """
            option = option.lower()
            valid_options = ['food', 'alcohol', 'total']
            
            if option not in valid_options:
                print "Invalid Option\n"          #Debugging use only
                return False
            return True
    
        tip_part = raw_input("What do they get tipped out on: ")
#        tip_part = 'total'                                 #Debugging use only
        if not isValidOption(tip_part):
            tip_part = raw_input("Valid Options are\n\t1. Food\n\t2. Alcohol\n\t3. Total\nEnter A Valid Option: ")
        
        ## Below validates the tip factor        
        
        tip_factor = raw_input("How much percentage of sales do you have to tip them: ")
#        tip_factor = 25                                #Debugging use only

        try:
            tip_factor = int(tip_factor)
            tip_factor_PASS = True
        except:
            print "Invalid Format"                  #Debugging use only
            tip_factor_PASS = False
        if not isValidTipFactor(tip_factor) or not tip_factor_PASS:
            tip_factor = raw_input("Enter a valid number between 0 and 100: ")
            try:
                tip_factor = int(tip_factor)
            except:
                print "Invalid Format"                  #Debugging use only
                exit(0)
            if not isValidTipFactor(tip_factor):
                exit(0)


        tip_out[tip_person] = [tip_factor, tip_part]
                
        finished = raw_input("Are you finished (y,n): ")
#        finished = 'y'                                       #Debugging use only

        if isValidYN(finished) == None:
            finished = raw_input("Enter \'y\' or \'n\': ")
        if isValidYN(finished) == None:
            exit(0)
        if isValidYN(finished):
            return tip_out


def main():
    parser = optparse.OptionParser('usage%prog -n <name> -t <title> -s <shift> -H <hours> -c <section> -o <tipOthers> -f <food> -a <alcohol>')
    parser.add_option('-n', dest='name', type='string', help='specify your name')
    parser.add_option('-t', dest='title', type='string', help='specify your title')
    parser.add_option('-s', dest='shift', type='string', help='specify your shift')
    parser.add_option('-H', dest='hours', type='float', help='specify your hours worked this shift')
    parser.add_option('-c', dest='section', type='string', help='specify your section')
    parser.add_option('-o', dest='tipOthers', type='string', help='do you have to tip others')
    parser.add_option('-f', dest='food', type='float', help='specify your food sales')
    parser.add_option('-a', dest='alcohol', type='float', help='specify your alcohol sales')
    
    
    (options, args) = parser.parse_args()
    
    name = options.name
    title = options.title
    shift = options.shift
    hours = options.hours
    section = options.section
    tipOthers = options.tipOthers
    food = options.food
    alcohol = options.alcohol
    
    TIP_FLAG = None
    
    ######### THE CODE BELLOW IS USED ONLY TO VALIDATE INPUTS #########
    
#    print 'name:', name
#    print 'title:', title
#    print 'shift:', shift
#    print 'hours:', hours
#    print 'section:', section
#    print 'tip Others:', tipOthers
#    print 'food:', food
#    print 'alcohol:', alcohol
    
    if not isValidString(name):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only

    if not isValidString(title):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only

    if not isValidString(shift):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only
    
    if not isValidHours(hours):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only

    if not isValidString(section):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only
        
    if not isValidYN(tipOthers):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only
        TIP_FLAG = True
    
    if not isValidSales(food):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only
        
    if not isValidSales(alcohol):
        print 'Error'                                   #Debugging use only
        exit(0)
    else:                                               #Debugging use only
        print 'Pass'                                    #Debugging use only

    ######### THE ABOVE CODE IS ONLY USED TO VALIDATE INPUTS #########

    if TIP_FLAG:
        tip_info = getTipInfo()
        

if __name__ == "__main__":
    main()
